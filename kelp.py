#kelp.py
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import lines as mlines
from matplotlib import markers
from scipy import linalg as la
from ascii_tools import loadASCIIplot, spectral_angle
import os

def import_endmembers():
    filenames = filter(lambda s: s.endswith('.txt'), os.listdir('.'))
    filenames.remove('bands.txt')
    n_filenames = filter(lambda s: s.startswith('n_'), filenames)
    s_filenames = filter(lambda s: s.startswith('s_'), filenames)
    giant_endmembers = []
    bull_endmembers = []
    giant_names = []
    bull_names = []
    
    for nfile in n_filenames:
        data, headers = loadASCIIplot(nfile)
        bull_endmembers += list(data.T[2:])
        bull_names += map(lambda s: nfile[:-4] + ' ' + s[s.index(':') + 2:s.index('~')] ,headers[2:])
        
    for sfile in s_filenames:
        data, headers = loadASCIIplot(sfile)
        giant_endmembers += list(data.T[2:])
        giant_names += map(lambda s: sfile[:-4] + ' ' + s[s.index(':') + 2:s.index('~')], headers[2:])
        
    data, headers = loadASCIIplot('c_monterey.txt')
    giant_endmembers += list(data.T[2:])
    giant_names += map(lambda s: 'c_monterey ' + s[s.index(':') + 2:s.index('~')], headers[2:])
    
    return giant_endmembers, bull_endmembers, giant_names, bull_names

def import_one_endmember(filename, roi_num):
    data, header = loadASCIIplot(filename)
    i = map(lambda s: s[s.index('kelp')+5:s.index('~')], header[2:]).index(str(roi_num))
    return data.T[i+2]
    
def normalize(v):
    return v.astype(float)/la.norm(v)

def decompose(pixel, endmembers):
    """
    pixel is a 1-d numpy array of length n representing the pixel to be decomposed
    endmembers is a list of 1-d numpy arrays of length n, representing the endmembers
    
    returns:
    a, a length-m 1-d ndarray of coefficients
    pr, the norm of the remainder vector
    """
    endmembers = np.array(endmembers).T
    E = np.array(map(normalize, endmembers.T)).T
    p = normalize(pixel)
    
    b,r = la.qr(E, mode = 'economic')
    
    pe = sum([p.dot(bi)*bi for bi in b.T])
    pr = p - pe
    
    R = np.array([[Ei.dot(Ej) for Ej in E.T] for Ei in E.T])
    s = np.array([pe.dot(ei) for ei in E.T])
    a = la.inv(R).dot(s)
    
    # print la.norm(a[0]*E[:,0] + a[1]*E[:,1] + pr - p)
    return a, pr
    
def quasi_mesma(pixel, set1, set2):
    smallest_res = np.inf
    for i, u in enumerate(set1):
        for j, v in enumerate(set2):
            a, res = decompose(pixel, [u, v])
            if la.norm(res) < smallest_res:
                best_a = a.copy()
                best_ij = (i,j)
                smallest_res = la.norm(res)

    # print la.norm(best_a[0]*normalize(set1[best_ij[0]]) + best_a[1]*normalize(set2[best_ij[1]]) + smallest_res)
    
    return (smallest_res, best_a) + best_ij
    
def classify(filename):
    gset, bset, gnames, bnames = import_endmembers()
    data, headers = loadASCIIplot(filename)
    bands = data[:,1]
    for k, v in enumerate(data.T[2:],2):
        res, a, i, j = quasi_mesma(v,gset,bset)
        s = headers[k]
        print filename[:-4], s[s.index(':') + 2:s.index('~')]
        print 'smallest residual was', res
        print 'it was generated by', gnames[i], 'and', bnames[j]
        print 'a =', a
        if a[0] > .5 and abs(a[1]) < .5:
            print 'giant kelp'
        elif a[1] > .5 and abs(a[0]) < .5:
            print 'bull kelp'
        else:
            print 'INCONCLUSIVE'
        print
    
def classify_by_spectrum(filename):
    gset, bset, gnames, bnames = import_endmembers()
    data, headers = loadASCIIplot(filename)
    bands = data[:,1]
    for k, pixel in enumerate(data.T[2:],2):
    
        s = headers[k]
        print filename[:-4], s[s.index(':') + 2:s.index('~')]
        
        lowest_g_dif = np.inf
        for i, u in enumerate(gset):
            dif = spectral_angle(u,pixel)
            if dif < lowest_g_dif:
                lowest_g_dif = dif
                best_i = i
                
        lowest_b_dif = np.inf
        for j, v in enumerate(bset):
            dif = spectral_angle(v,pixel)
            if dif < lowest_b_dif:
                lowest_b_dif = dif
                best_j = j        
                
        print 'smallest angle with giant kelp was', lowest_g_dif, 'with', gnames[best_i]
        print 'smallest angle with bull kelp was', lowest_b_dif, 'with', bnames[best_j]
        if abs(lowest_b_dif - lowest_g_dif) < 4:
            print 'INCONCLUSIVE'
        elif lowest_b_dif < lowest_g_dif:
            print 'bull kelp'
        elif lowest_b_dif > lowest_g_dif:
            print 'giant kelp'
        print
           
def test_quasi_mesma():
    gset, bset, gnames, bnames = import_endmembers()
    data, headers = loadASCIIplot('c_pebble_beach.txt')
    bands = data[:,1]
    pixel = data[:,2]
    res, a, i, j = quasi_mesma(pixel,gset,bset)
    
    print 'smallest residual was', res
    print 'it was generated by', gnames[i], 'and', bnames[j]
    print 'a =', a
    
    print la.norm(normalize(pixel) - a[0]*normalize(gset[i]) - a[1]*normalize(bset[j]))
    
    plt.plot(bands, normalize(gset[i]), color = 'green')
    plt.plot(bands, normalize(bset[j]), color = 'blue')
    plt.plot(bands, normalize(pixel), color = 'orange')
    plt.plot(bands, a[0]*normalize(gset[i]) + a[1]*normalize(bset[j]), color = 'purple')
    plt.legend([gnames[i], bnames[j], headers[2], 'best fit'])
    plt.show()
    
def compare_endmembers():
    v = import_one_endmember('c_carmel.txt',1.1)
    u = import_one_endmember('n_fort_ross.txt',1.1)
    with open('bands.txt') as file:
        bands = map(float,file.read().split(', '))
        bands = bands[:138]
    plt.plot(bands,normalize(v),color='green')
    plt.plot(bands,normalize(u),color='blue')
    plt.xlabel('Wavelength (nm)')
    plt.ylabel('Normalized Reflectance')
    plt.legend(['giant kelp','bull kelp'])
    plt.show()
    
    

    
def compare_lots_of_endmembers():
    size = 1
    filenames = filter(lambda s: s.endswith('.txt'), os.listdir('.'))
    filenames.remove('bands.txt')
    n_filenames = filter(lambda s: s.startswith('n_'), filenames)
    s_filenames = filter(lambda s: s.startswith('s_'), filenames)
    
    blue_line = mlines.Line2D([],[],color='blue', label = 'bull kelp')
    green_line = mlines.Line2D([],[],color='green', label = 'giant kelp')
    # orange_line = mlines.Line2D([],[],color='orange', label = 'monterey kelp')
    
    bands = loadASCIIplot(n_filenames[0])[0][:,1]
    print 'working'
    for nfile in n_filenames:
        data, headers = loadASCIIplot(nfile)
        for v in data.T[2:]:
            plt.scatter(bands,v, color = 'blue', s = size)
            # plt.scatter(0,1.*v[44]/v[14], color = 'blue')
            
    for sfile in s_filenames:
        data, headers = loadASCIIplot(sfile)
        for i, v in enumerate(data.T[2:],2):
            if normalize(v)[4] > .08:
                plt.scatter(data.T[1],v, color = 'red', s = size)
                print sfile
                print headers[i]
            else:
                plt.scatter(bands,v, color = 'green', s = size)
            # plt.scatter(1,1.*v[44]/v[14], color = 'green')

    data, headers = loadASCIIplot('c_monterey.txt')
    for v in data.T[2:]:
        plt.scatter(bands,v, color = 'green', s = size)
        # plt.scatter(.5,1.*v[44]/v[14], color = 'orange')
            
    plt.legend(handles = [blue_line, green_line])#, orange_line])
    plt.show()

    
def plot_kelp_against_endmemebers(filename): #BROKEN NOW since I changed all the filenames
    filenames = os.listdir('.')
    filenames = filter(lambda s: s.endswith('.txt'),filenames)
    filenames.remove('bands.txt')
    bullkelpfilenames = filter(lambda s: s.startswith('041013'),filenames)
    giantkelpfilenames = filter(lambda s: s.startswith('041113'),filenames)
    
    bands = loadASCIIplot(bullkelpfilenames[0])[0][:,1]
    
    bullkelpdata = np.array([loadASCIIplot(e_filename)[0][:,4] for e_filename in bullkelpfilenames])
    giantkelpdata = np.array([loadASCIIplot(e_filename)[0][:,4] for e_filename in giantkelpfilenames])
    
    data, header = loadASCIIplot(filename)
    for h in header: print h
    
    legend = []
    for i,v in enumerate(data.T[2:]):
        if 'kelp 8' in header[i+2] or 'kelp 9' in header[i+2]:
            plt.plot(bands, normalize(v), linewidth = 2)
            legend.append(header[i+2])
            
    plt.legend(map(lambda s: s[6:s.index('~')],legend))
    
    blue_line = mlines.Line2D([],[],color='blue', label = 'bull kelp')
    green_line = mlines.Line2D([],[],color='green', label = 'giant kelp')
    
    for bkelp in bullkelpdata:
        plt.plot(bands, normalize(bkelp), color = 'blue')
    for gkelp in giantkelpdata:
        plt.plot(bands, normalize(gkelp), color = 'green')
    # plt.legend(handles = [blue_line, green_line])
        
    plt.show()
    
def concrete_grass_test():
    data, header = loadASCIIplot('..\other endmembers\grass_concrete.txt')
    concrete1 = data[:,2]
    concrete2 = data[:,3]
    grass = data[:,4]
    
    a, pr = decompose(concrete2,[grass, concrete1])
    print 'a =', a
    print '||pr|| =', la.norm(pr)
    print
    print 
    # plt.plot(data[:,1],abs(pr))
    # plt.plot(data[:,1],normalize(lagoon))
    # plt.plot(data[:,1],normalize(grass))
    # plt.plot(data[:,1],normalize(deepwater))
    # plt.legend(['residual','lagoon','grass','deepwater'])
    # plt.show()
    # print
    print 'angle between concretes:', spectral_angle(concrete1, concrete2)
    print 'angle between concrete1 and grass:', spectral_angle(concrete1, grass)
    print 'angle between concrete2 and grass:', spectral_angle(concrete2, grass)

if __name__ == '__main__':
    classify_by_spectrum('c_pebble_beach.txt')
    
# Randii Wessen was our JPL tour guide
    
    